{"version":3,"sources":["../../../../../../src/streaming/rules/synchronization/LiveEdgeWithTimeSynchronizationRule.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BA+B0B,kBAAkB;;;;gCACnB,4BAA4B;;;;AAErD,SAAS,mCAAmC,CAAC,MAAM,EAAE;;AAEjD,QAAI,QAAQ,YAAA,CAAC;AACb,QAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAC3B,QAAI,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;;;;;;AAMjD,aAAS,OAAO,CAAC,YAAY,EAAE,QAAQ,EAAE;AACrC,YAAI,kBAAkB,GAAG,YAAY,CAAC,YAAY,EAAE,CAAC;AACrD,YAAI,6BAA6B,GAAG,kBAAkB,CAAC,SAAS,CAAC,GAAG,CAAC;AACrE,YAAI,CAAC,GAAG,2BAAc,OAAO,CAAC;;AAE9B,YAAI,kBAAkB,CAAC,yBAAyB,EAAE;;;;;;;AAO9C,gBAAI,cAAc,GAAG,iBAAiB,CAAC,mBAAmB,EAAE,CAAC;AAC7D,6BAAiB,CAAC,mBAAmB,CAAC,6BAA6B,CAAC,CAAC;AACrE,oBAAQ,CAAC,gCAAc,OAAO,CAAC,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;SAC9D,MAAM;AACH,oBAAQ,CAAC,gCAAc,OAAO,CAAC,CAAC,MAAM,CAAC,6BAA6B,EAAE,CAAC,CAAC,CAAC,CAAC;SAC7E;KACJ;;AAED,YAAQ,GAAG;AACP,eAAO,EAAE,OAAO;KACnB,CAAC;;AAEF,WAAO,QAAQ,CAAC;CACnB;;AAED,mCAAmC,CAAC,qBAAqB,GAAG,qCAAqC,CAAC;qBACnF,8BAAa,eAAe,CAAC,mCAAmC,CAAC","file":"LiveEdgeWithTimeSynchronizationRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport SwitchRequest from '../SwitchRequest';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction LiveEdgeWithTimeSynchronizationRule(config) {\n\n    let instance;\n    let context = this.context;\n    let timelineConverter = config.timelineConverter;\n\n    // if the time has been synchronized correctly (which it must have been\n    // to end up executing this rule), the last entry in the DVR window\n    // should be the live edge. if that is incorrect for whatever reason,\n    // playback will fail to start and some other action should be taken.\n    function execute(rulesContext, callback) {\n        var representationInfo = rulesContext.getTrackInfo();\n        var liveEdgeInitialSearchPosition = representationInfo.DVRWindow.end;\n        var p = SwitchRequest.DEFAULT;\n\n        if (representationInfo.useCalculatedLiveEdgeTime) {\n            //By default an expected live edge is the end of the last segment.\n            // A calculated live edge ('end' property of a range returned by TimelineConverter.calcSegmentAvailabilityRange)\n            // is used as an initial point for finding the actual live edge.\n            // But for SegmentTimeline mpds (w/o a negative @r) the end of the\n            // last segment is the actual live edge. At the same time, calculated live edge is an expected live edge.\n            // Thus, we need to switch an expected live edge and actual live edge for SegmentTimeline streams.\n            var actualLiveEdge = timelineConverter.getExpectedLiveEdge();\n            timelineConverter.setExpectedLiveEdge(liveEdgeInitialSearchPosition);\n            callback(SwitchRequest(context).create(actualLiveEdge, p));\n        } else {\n            callback(SwitchRequest(context).create(liveEdgeInitialSearchPosition, p));\n        }\n    }\n\n    instance = {\n        execute: execute\n    };\n\n    return instance;\n}\n\nLiveEdgeWithTimeSynchronizationRule.__dashjs_factory_name = 'LiveEdgeWithTimeSynchronizationRule';\nexport default FactoryMaker.getClassFactory(LiveEdgeWithTimeSynchronizationRule);"]}