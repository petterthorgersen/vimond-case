{"version":3,"sources":["../../../../../../src/streaming/rules/abr/BufferOccupancyRule.js"],"names":[],"mappings":"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","file":"BufferOccupancyRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport SwitchRequest from '../SwitchRequest';\nimport MediaPlayerModel from '../../models/MediaPlayerModel';\nimport AbrController from '../../controllers/AbrController';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport Debug from '../../../core/Debug';\n\nfunction BufferOccupancyRule(config) {\n\n    let instance;\n    let context = this.context;\n    let log = Debug(context).getInstance().log;\n\n    let metricsModel = config.metricsModel;\n    let dashMetrics = config.dashMetrics;\n\n    let lastSwitchTime,\n        mediaPlayerModel;\n\n    function setup() {\n        lastSwitchTime = 0;\n        mediaPlayerModel = MediaPlayerModel(context).getInstance();\n    }\n\n    function execute (rulesContext, callback) {\n        var now = new Date().getTime() / 1000;\n        var mediaInfo = rulesContext.getMediaInfo();\n        var representationInfo = rulesContext.getTrackInfo();\n        var mediaType = mediaInfo.type;\n        var waitToSwitchTime = !isNaN(representationInfo.fragmentDuration) ? representationInfo.fragmentDuration / 2 : 2;\n        var current = rulesContext.getCurrentValue();\n        var streamProcessor = rulesContext.getStreamProcessor();\n        var abrController = streamProcessor.getABRController();\n        var metrics = metricsModel.getReadOnlyMetricsFor(mediaType);\n        var lastBufferLevel = dashMetrics.getCurrentBufferLevel(metrics);\n        var lastBufferStateVO = (metrics.BufferState.length > 0) ? metrics.BufferState[metrics.BufferState.length - 1] : null;\n        var isBufferRich = false;\n        var maxIndex = mediaInfo.representationCount - 1;\n        var switchRequest = SwitchRequest(context).create(SwitchRequest.NO_CHANGE, SwitchRequest.WEAK, {name: BufferOccupancyRule.__dashjs_factory_name});\n\n        if (now - lastSwitchTime < waitToSwitchTime ||\n            abrController.getAbandonmentStateFor(mediaType) === AbrController.ABANDON_LOAD) {\n            callback(switchRequest);\n            return;\n        }\n\n        if (lastBufferStateVO !== null) {\n            // This will happen when another rule tries to switch from top to any other.\n            // If there is enough buffer why not try to stay at high level.\n            if (lastBufferLevel > lastBufferStateVO.target) {\n                isBufferRich = (lastBufferLevel - lastBufferStateVO.target) > mediaPlayerModel.getRichBufferThreshold();\n\n                if (isBufferRich && mediaInfo.representationCount > 1) {\n                    switchRequest.value = maxIndex;\n                    switchRequest.priority = SwitchRequest.STRONG;\n                    switchRequest.reason.bufferLevel = lastBufferLevel;\n                    switchRequest.reason.bufferTarget = lastBufferStateVO.target;\n                }\n            }\n        }\n\n        if (switchRequest.value !== SwitchRequest.NO_CHANGE && switchRequest.value !== current) {\n            log('BufferOccupancyRule requesting switch to index: ', switchRequest.value, 'type: ',mediaType, ' Priority: ',\n                switchRequest.priority === SwitchRequest.DEFAULT ? 'Default' :\n                    switchRequest.priority === SwitchRequest.STRONG ? 'Strong' : 'Weak');\n        }\n\n        callback(switchRequest);\n    }\n\n    function reset() {\n        lastSwitchTime = 0;\n    }\n\n    instance = {\n        execute: execute,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nBufferOccupancyRule.__dashjs_factory_name = 'BufferOccupancyRule';\nexport default FactoryMaker.getClassFactory(BufferOccupancyRule);\n"]}